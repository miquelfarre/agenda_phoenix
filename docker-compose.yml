services:
  # Supabase PostgreSQL Database
  db:
    build:
      context: ./database
      dockerfile: Dockerfile
    container_name: agenda_phoenix_db
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-your-super-secret-and-long-postgres-password}
      POSTGRES_DB: ${POSTGRES_DB:-postgres}
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Supabase Studio (UI for managing database)
  studio:
    image: supabase/studio:2025.10.01-sha-8460121
    container_name: agenda_phoenix_studio
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      SUPABASE_URL: http://kong:8000
      STUDIO_PG_META_URL: http://meta:8080
      SUPABASE_ANON_KEY: ${ANON_KEY:-eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJvbGUiOiJhbm9uIiwiYXVkIjoiYXV0aGVudGljYXRlZCIsImV4cCI6MTk4MzgxMjk5Nn0.VZkz5UpquChN3tfC9v5FyuE7_k6cqyrOXpIpajpGVsw}
      SUPABASE_SERVICE_KEY: ${SERVICE_ROLE_KEY:-eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJvbGUiOiJzZXJ2aWNlX3JvbGUiLCJhdWQiOiJhdXRoZW50aWNhdGVkIiwiZXhwIjoxOTgzODEyOTk2fQ.DTZ2kRzUk5A16SC7lPkk396yf5pHeSq1u1rtdhnSiHM}
    depends_on:
      - kong
    healthcheck:
      # Use CMD-SHELL so $HOSTNAME is expanded; avoid backticks to keep YAML escaping simple
      test: ["CMD-SHELL", "node -e \"fetch('http://$${HOSTNAME}:3000').then(()=>process.exit(0)).catch(()=>process.exit(1))\""]
      interval: 10s
      timeout: 3s
      retries: 10
      start_period: 20s

  # Kong API Gateway
  kong:
    image: kong:2.8.1
    container_name: agenda_phoenix_kong
    restart: unless-stopped
    ports:
      - "8000:8000"
      - "8443:8443"
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /var/lib/kong/kong.yml
      KONG_DNS_ORDER: LAST,A,CNAME
      KONG_PLUGINS: request-transformer,cors,key-auth,acl
      KONG_NGINX_PROXY_PROXY_BUFFER_SIZE: 160k
      KONG_NGINX_PROXY_PROXY_BUFFERS: 64 160k
    volumes:
      - ./backend/config/kong.yml:/var/lib/kong/kong.yml
    depends_on:
      - rest
      - realtime
      - storage
      - auth

  # PostgREST (Auto-generated REST API)
  rest:
    image: postgrest/postgrest:v13.0.7
    container_name: agenda_phoenix_rest
    restart: unless-stopped
    environment:
      PGRST_DB_URI: postgres://postgres:${POSTGRES_PASSWORD:-your-super-secret-and-long-postgres-password}@db:5432/postgres
      PGRST_DB_SCHEMAS: public,storage
      PGRST_DB_ANON_ROLE: anon
      PGRST_JWT_SECRET: super-secret-jwt-token-with-at-least-32-characters-long
      PGRST_DB_USE_LEGACY_GUCS: "false"
    depends_on:
      db:
        condition: service_healthy
      backend:
        condition: service_healthy

  # Supabase Realtime Server
  realtime:
    image: supabase/realtime:v2.39.0
    container_name: agenda_phoenix_realtime
    restart: unless-stopped
    environment:
      DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD:-your-super-secret-and-long-postgres-password}@db:5432/${POSTGRES_DB:-postgres}
      # Explicit DB_* envs required by older Realtime images during migrations
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB:-postgres}
      DB_USER: postgres
      DB_PASSWORD: ${POSTGRES_PASSWORD:-your-super-secret-and-long-postgres-password}
      PORT: 4000
      APP_NAME: realtime
      JWT_SECRET: super-secret-jwt-token-with-at-least-32-characters-long
      # Phoenix requires a secret_key_base of at least 64 bytes; generate a long default if not provided
      SECRET_KEY_BASE: "${SECRET_KEY_BASE:-b9fba8f3e2bd04f6c3f1a4e7d9c0b2a1b9fba8f3e2bd04f6c3f1a4e7d9c0b2a1b9fba8f3e2bd04f6c3f1a4e7d9c0b2a1}"
      # DB_ENC_KEY removed - using plaintext mode for compatibility
      REPLICATION_MODE: STREAM
      REPLICATION_POLL_INTERVAL: 100
      # Enable secure channels for proper WebSocket authentication
      SECURE_CHANNELS: "true"
      SLOT_NAME: supabase_realtime_rls
      TEMPORARY_SLOT: "true"
      RLIMIT_NOFILE: 1048576
    depends_on:
      db:
        condition: service_healthy

  # Supabase Auth (GoTrue)
  auth:
    image: supabase/gotrue:v2.180.0
    container_name: agenda_phoenix_auth
    restart: unless-stopped
    environment:
      GOTRUE_API_HOST: 0.0.0.0
      GOTRUE_API_PORT: 9999
      API_EXTERNAL_URL: ${API_EXTERNAL_URL:-http://localhost:8000}

      GOTRUE_DB_DRIVER: postgres
      GOTRUE_DB_DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD:-your-super-secret-and-long-postgres-password}@db:5432/postgres?search_path=auth

      GOTRUE_SITE_URL: ${SITE_URL:-http://localhost:3000}
      GOTRUE_URI_ALLOW_LIST: ${ADDITIONAL_REDIRECT_URLS:-}
      GOTRUE_DISABLE_SIGNUP: ${DISABLE_SIGNUP:-false}

      GOTRUE_JWT_ADMIN_ROLES: service_role
      GOTRUE_JWT_AUD: authenticated
      GOTRUE_JWT_DEFAULT_GROUP_NAME: authenticated
      GOTRUE_JWT_EXP: ${JWT_EXPIRY:-3600}
      GOTRUE_JWT_SECRET: super-secret-jwt-token-with-at-least-32-characters-long

      GOTRUE_EXTERNAL_EMAIL_ENABLED: ${ENABLE_EMAIL_SIGNUP:-true}
      GOTRUE_MAILER_AUTOCONFIRM: ${ENABLE_EMAIL_AUTOCONFIRM:-true}
    depends_on:
      db:
        condition: service_healthy

  # Supabase Storage
  storage:
    image: supabase/storage-api:v1.28.0
    container_name: agenda_phoenix_storage
    restart: unless-stopped
    environment:
      ANON_KEY: ${ANON_KEY:-eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0}
      SERVICE_KEY: ${SERVICE_ROLE_KEY:-eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJvbGUiOiJzZXJ2aWNlX3JvbGUiLCJhdWQiOiJhdXRoZW50aWNhdGVkIiwiZXhwIjoxOTgzODEyOTk2fQ.DTZ2kRzUk5A16SC7lPkk396yf5pHeSq1u1rtdhnSiHM}
      POSTGREST_URL: http://rest:3000
      PGRST_JWT_SECRET: super-secret-jwt-token-with-at-least-32-characters-long
      DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD:-your-super-secret-and-long-postgres-password}@db:5432/postgres
      FILE_SIZE_LIMIT: 52428800
      STORAGE_BACKEND: file
      FILE_STORAGE_BACKEND_PATH: /var/lib/storage
      TENANT_ID: stub
      REGION: stub
      GLOBAL_S3_BUCKET: stub
    volumes:
      - storage_data:/var/lib/storage
    depends_on:
      db:
        condition: service_healthy
      rest:
        condition: service_started

  # Meta (Database migrations)
  meta:
    image: supabase/postgres-meta:v0.91.6
    container_name: agenda_phoenix_meta
    restart: unless-stopped
    environment:
      PG_META_PORT: 8080
      PG_META_DB_HOST: db
      PG_META_DB_PORT: 5432
      PG_META_DB_NAME: ${POSTGRES_DB:-postgres}
      PG_META_DB_USER: postgres
      PG_META_DB_PASSWORD: ${POSTGRES_PASSWORD:-your-super-secret-and-long-postgres-password}
    depends_on:
      db:
        condition: service_healthy

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: agenda_phoenix_backend
    restart: unless-stopped
    ports:
      - "8001:8001"
    environment:
      SUPABASE_URL: http://kong:8000
      SUPABASE_KEY: ${SERVICE_ROLE_KEY:-eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJvbGUiOiJzZXJ2aWNlX3JvbGUiLCJhdWQiOiJhdXRoZW50aWNhdGVkIiwiZXhwIjoxOTgzODEyOTk2fQ.DTZ2kRzUk5A16SC7lPkk396yf5pHeSq1u1rtdhnSiHM}
      # Explicit service role key for Supabase Admin API calls (signed with JWT_SECRET)
      SUPABASE_SERVICE_ROLE_KEY: ${SERVICE_ROLE_KEY_OVERRIDE:-eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJvbGUiOiJzZXJ2aWNlX3JvbGUiLCJhdWQiOiJhdXRoZW50aWNhdGVkIiwiZXhwIjoxOTgzODEyOTk2fQ.DTZ2kRzUk5A16SC7lPkk396yf5pHeSq1u1rtdhnSiHM}
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD:-your-super-secret-and-long-postgres-password}@db:5432/postgres
      # Individual DB connection variables for init_db.py to create encrypted extensions settings
      DB_HOST: db
      DB_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB:-postgres}
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-your-super-secret-and-long-postgres-password}
      JWT_SECRET: super-secret-jwt-token-with-at-least-32-characters-long
      DB_ENC_KEY: ${DB_ENC_KEY:-0123456789abcdef}
      # Control how init_db.py stores tenants.jwt_secret to match the running Realtime image.
      # Options: 'plaintext' or 'encrypted'. Use plaintext for extensions db settings, encrypted for JWT.
      REALTIME_TENANT_SECRET_MODE: ${REALTIME_TENANT_SECRET_MODE:-plaintext}
      # Must match APP_NAME in realtime service (default 'supabase', but we use 'realtime')
      REALTIME_TENANT_EXTERNAL_ID: realtime
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 30s
    depends_on:
      db:
        condition: service_healthy
      realtime:
        condition: service_started

volumes:
  db_data:
  storage_data:
